const counter = (
  state = { value: 0 },
  action
) => {
  switch (action.type) {
    case 'INCREMENT':
      return {
        value: state.value + 1
      };
    case 'DECREMENT':
      return {
        value: state.value - 1
      };
    default:
      return state;
  }
}

class App extends Component {
  state = counter(undefined, {});

  dispatch(action) {
    this.setState(prevState =>
      counter(prevState, action)
    );
  }

  increment = () => {
    console.log('INCREMENT');

    this.dispatch({
      type: 'INCREMENT'
    });
  };

  decrement = () => {
    console.log('DECREMENT');

    this.dispatch({
      type: 'DECREMENT'
    });
  };

  render() {
    console.log(
      'Current:',
      this.state.value
    );
    return (
      <div>
        {this.state.value} <br />
        <button
          onClick={this.decrement}
        >
          -
        </button>
        <button
          onClick={this.increment}
        >
          +
        </button>
      </div>
    )
  }
}

render(<App />, mountNode);
